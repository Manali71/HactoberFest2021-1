/*
    Company Tags  : Microsoft
    Leetcode Link : https://leetcode.com/problems/longest-increasing-subsequence/
*/

class Solution {
public:
    int LIS_Memoization(vector<int>& nums, int prev, int curr, vector<vector<int>>& t) {
        if(curr == nums.size())
            return 0;
        
        //prev+1  because prev is -1 initially
        if(t[prev+1][curr] != -1)
            return t[prev+1][curr];
        int taken = 0;
        if(prev < 0 || nums[curr] > nums[prev]) {
            taken = 1 + LIS_Memoization(nums, curr, curr+1, t);
        }
        
        int notTaken = LIS_Memoization(nums, prev, curr+1, t);
        
        return t[prev + 1][curr] = max(notTaken, taken);
    }
    
    int LIS_topDown(vector<int>& nums) {
        int n = nums.size();
        if(n == 0 || n == 1)
            return n;
        
        vector<int> lis(n, 1);
        int result = 1;
        for(int i = 1; i<n; i++) {
            for(int j = 0; j<i; j++) {
                if(nums[i] > nums[j]) {
                    lis[i] = max(lis[i], lis[j]+1);
                    result = max(result, lis[i]);
                }
            }
        }
        return result;
    }
    
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        if(n == 0 || n == 1)
            return n;
        
        vector<vector<int>> t(n+1, vector<int>(n+1, -1));
        int prev = -1;
        int curr = 0;
        return LIS_Memoization(nums, prev, curr, t);
        //return LIS_topDown();
    }
};
