/*
    Company Tags  : Microsoft
    Leetcode Link : https://leetcode.com/problems/jump-game/
*/


//OPTIMAL Solution (ACCEPTED)
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int maxReachable = 0;
        int n            = nums.size();
        
        for(int i = 0; i<n; i++) {
            if(i > maxReachable) {
                return false;
            }
            maxReachable = max(maxReachable, nums[i]+i);
        }
        
        return true;
    }
};

//Recursive (TLE in one case)
class Solution {
public:
    int solve(vector<int>& nums, int idx, int n) {
        if(idx >= n)
            return false;
        if(idx == n-1)
            return true;
        
        bool possible = false;
        for(int i = 1; i<= nums[idx]; i++) {
            if(solve(nums, idx+i, n)) {
                possible = true;
                break;
            }
        }
        
        return possible;
    }
    bool canJump(vector<int>& nums) {
        int idx = 0;
        int n   = nums.size();
        return solve(nums, idx, n);
    }
};
