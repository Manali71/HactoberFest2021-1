/*
    Company Tags : Amazon
*/

class Solution {
public:
    vector<pair<int, int>> directions{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    bool isSafe(vector<vector<int>>& grid, int i, int j) {
        return (i >= 0 && i<grid.size() && j>=0 && j<grid[0].size() && grid[i][j] == 1);
    }
    
    void DFS(vector<vector<int>>& grid, int i, int j, int& tempArea) {      
        grid[i][j] = -1;
        tempArea++;
        for(pair<int, int> p:directions) {
            int new_i = i + p.first;
            int new_j = j + p.second;
            if(isSafe(grid, new_i, new_j)) {
                DFS(grid, new_i, new_j, tempArea);
            }
        }
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int area = 0;
        for(int i = 0; i<m; i++) {
            for(int j = 0; j<n; j++) {
                if(grid[i][j] == 1) {
                    int tempArea = 0;
                    DFS(grid, i, j, tempArea);
                    area = max(area, tempArea);
                }
            }
        }
        return area;
    }
};
